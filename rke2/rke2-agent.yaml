# RKE2 Agent Node
# port forwarding for ports 80 and 443

images:
# Latest release image.
# Hint: run `limactl prune` to invalidate the cache
- location: "https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-amd64.img"
  arch: "x86_64"
- location: "https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-arm64.img"
  arch: "aarch64"

# if default 4GiB is not enough
#memory: 6GiB

mounts: 
- location: "~/git/flphvlck/k8s-labs/rke2/lima-rke2-mount"
  mountPoint: "/tmp/lima-rke2-mount"
  writable: true
  
# containerd is managed by rke2, not by Lima, so the values are set to false here.
containerd:
  system: false
  user: false

user:
  name: lab
  comment: "Lab User"
  uid: 1000
  home: "/home/{{.User}}"

networks:
  - lima: user-v2

portForwards:
  - guestPort: 80
    hostIP: "127.0.0.1"
  - guestPort: 443
    hostIP: "127.0.0.1"
  - guestPortRange: [1, 65535]
    guestIP: "0.0.0.0"
    ignore: true

provision:
- mode: system
  script: |
    #!/bin/sh

    . /tmp/lima-rke2-mount/rke2-channel
    export INSTALL_RKE2_CHANNEL

    [ -d /var/lib/rancher/rke2 ] && exit 0

    [ -d /etc/rancher/rke2 ] || mkdir -p /etc/rancher/rke2
    cp /tmp/lima-rke2-mount/registering-config.yaml /etc/rancher/rke2/config.yaml

    curl -sfL https://get.rke2.io | sh -

    systemctl enable rke2-agent.service
    systemctl start rke2-agent.service

probes:
- script: |
    #!/bin/bash
    set -eux -o pipefail
    if ! timeout 30s bash -c "until sudo /var/lib/rancher/rke2/bin/kubectl --kubeconfig=/var/lib/rancher/rke2/agent/kubelet.kubeconfig get nodes -o name \"{{.Hostname}}\" | grep -q \"^node\/{{.Hostname}}$\"; do sleep 3; done"; then
            echo >&2 "Agent node is not added yet"
            exit 1
    fi
  hint: |
    RKE2 agent node is not added yet.
    Run "limactl shell rke2 sudo journalctl -u rke2-agent" to check the log.
    If that is still empty, check the bottom of the log at "/var/log/cloud-init-output.log".
- script: |
    #!/bin/bash
    set -eux -o pipefail
    if ! timeout 30s bash -c "until curl localhost; do sleep 5; done"; then
        echo >&2 "Ingress controller is not running yet"
        exit 1
    else
        sleep 15
    fi
